pragma solidity ^0.7.0;

// This is the contract for a decentralized electronic signature platform
contract SignaturePlatform {

    // This is the data structure for a document on the platform
    struct Document {
        bytes32 hash; // The hash of the document
        address[] signatures; // The list of signatures for the document
    }

    // This is the mapping that stores the documents on the platform
    mapping(bytes32 => Document) public documents;

    // This function is called by the document creator to create a new document on the platform
    function createDocument(bytes32 _hash) public {
        // Create a new document and store it in the mapping
        documents[_hash] = Document(_hash, new address[](0));
    }

    // This function is called by a user who wants to sign the document
    function addSignature(bytes32 _hash, address _signature) public {
        // Get the document from the mapping
        Document storage doc = documents[_hash];
        // Add the signature to the list of signatures for the document
        doc.signatures.push(_signature);
    }

    // This function is called by anyone who wants to verify the authenticity of a signature on the document
    function verifySignature(bytes32 _hash, address _signature) public view returns (bool) {
        // Get the document from the mapping
        Document storage doc = documents[_hash];
        // Loop through the list of signatures for the document
        for (uint256 i = 0; i < doc.signatures.length; i++) {
            // If the signature is found, return true
            if (doc.signatures[i] == _signature) {
                return true;
            }
        }
        // If the signature is not found, return false
        return false;
    }
}
